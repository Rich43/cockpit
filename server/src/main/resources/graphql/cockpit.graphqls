enum LifeCycleStatus {
    PROPOSED
    SCOPED
    EXECUTION_READY
    ACTIVE
    COMPLETED
    CANCELLED
    SUSPENDED
}

interface PlanItem {
    id: ID!
    name: String!
    description: String
    lifeCycleStatus: LifeCycleStatus!
}

type Metric implements PlanItem {
    id: ID!
    name: String!
    description: String
    lifeCycleStatus: LifeCycleStatus!
}

type Objective implements PlanItem {
    id: ID!
    name: String!
    description: String
    lifeCycleStatus: LifeCycleStatus!
}

type Project implements PlanItem {
    id: ID!
    name: String!
    description: String
    lifeCycleStatus: LifeCycleStatus!
}

type Query {
    findAllMetrics: [Metric]!
    findMetric(id: ID!): Metric!

    findAllObjectives: [Objective]!
    findObjective(id: ID!): Objective!

    findAllProjects: [Project]!
    findProject(id: ID!): Project!
}

type Mutation {
    createMetric(name: String!, description: String, lifeCycleStatus: LifeCycleStatus!): Metric!
    deleteMetric(id: ID!): Boolean
    updateMetricName(id: ID!, newName: String!): Metric!
    updateMetricDescription(id: ID!, newDescription: String!): Metric!
    updateMetricLifeCycleStatus(id: ID!, newLifeCycleStatus: LifeCycleStatus!): Metric!

    createObjective(name: String!, description: String, lifeCycleStatus: LifeCycleStatus!): Objective!
    deleteObjective(id: ID!): Boolean
    updateObjectiveName(id: ID!, newName: String!): Objective!
    updateObjectiveDescription(id: ID!, newDescription: String!): Objective!
    updateObjectiveLifeCycleStatus(id: ID!, newLifeCycleStatus: LifeCycleStatus!): Objective!

    createProject(name: String!, description: String, lifeCycleStatus: LifeCycleStatus!): Project!
    deleteProject(id: ID!): Boolean
    updateProjectName(id: ID!, newName: String!): Project!
    updateProjectDescription(id: ID!, newDescription: String!): Project!
    updateProjectLifeCycleStatus(id: ID!, newLifeCycleStatus: LifeCycleStatus!): Project!
}